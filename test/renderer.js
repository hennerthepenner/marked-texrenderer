// Generated by CoffeeScript 1.6.3
(function() {
  var Renderer, marked, render, should;

  Renderer = require("../index");

  marked = require("marked");

  should = require("should");

  render = function(inputText) {
    return marked(inputText, {
      renderer: new Renderer()
    });
  };

  describe("Basic rendering", function() {
    /*
    # Inline rendering
    */

    it("renders strong text to bold face", function(done) {
      render("**bla**").should.eql("\\textbf{bla}\n\n");
      render("__bla__").should.eql("\\textbf{bla}\n\n");
      return done();
    });
    it("renders emphasized text to italic", function(done) {
      render("*bla*").should.eql("\\textit{bla}\n\n");
      render("_bla_").should.eql("\\textit{bla}\n\n");
      return done();
    });
    it("renders codespan text to monotype", function(done) {
      render("`bla`").should.eql("\\texttt{bla}\n\n");
      return done();
    });
    it("renders linebreaks to linebreaks", function(done) {
      render("bla\nblub").should.eql("bla\nblub\n\n");
      return done();
    });
    it("doesn't render strikethroughs", function(done) {
      render("~~bla~~").should.eql("bla\n\n");
      return done();
    });
    it("renders links to urls", function(done) {
      var markdown, tex;
      markdown = 'This is [an example](http://example.com/ "Title") inline link.';
      tex = "This is \\url{http://example.com/} inline link.\n\n";
      render(markdown).should.eql(tex);
      return done();
    });
    it("doesn't render images", function(done) {
      render("![bla](/path/to/img.jpg)").should.eql("\n\n");
      return done();
    });
    /*
    # Block rendering
    */

    it("renders paragraphs by adding a blank line", function(done) {
      render("bla").should.eql("bla\n\n");
      return done();
    });
    it("doesn't change html", function(done) {
      render("<p>bla</p>").should.eql("<p>bla</p>");
      return done();
    });
    it("renders headings as sections and paragraphs", function(done) {
      render("bla\n===").should.eql("\\section{bla}\n\n");
      render("bla\n---").should.eql("\\subsection{bla}\n\n");
      render("# bla").should.eql("\\section{bla}\n\n");
      render("## bla").should.eql("\\subsection{bla}\n\n");
      render("### bla").should.eql("\\subsubsection{bla}\n\n");
      render("#### bla").should.eql("\\paragraph{bla}\n\n");
      render("##### bla").should.eql("\\subparagraph{bla}\n\n");
      render("###### bla").should.eql("bla\n\n");
      return done();
    });
    it("renders horizontal lines as page breaks", function(done) {
      render("***").should.eql("\\pagebreak\n\n");
      return done();
    });
    it("renders lists as itemized or enumerated thingy", function(done) {
      var enumerated, itemized;
      itemized = "\\begin{itemize}\n\\item bla\n\\end{itemize}\n\n";
      render("* bla").should.eql(itemized);
      render("- bla").should.eql(itemized);
      render("+ bla").should.eql(itemized);
      enumerated = "\\begin{enumerate}\n\\item bla\n\\end{enumerate}\n\n";
      render("1. bla").should.eql(enumerated);
      render("8. bla").should.eql(enumerated);
      return done();
    });
    return it("doesn't render tables", function(done) {
      var markdown, tex;
      markdown = "First Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell";
      tex = "First HeaderSecond HeaderContent CellContent CellContent CellContent Cell\n\n";
      render(markdown).should.eql(tex);
      return done();
    });
  });

  describe("Code rendering", function() {
    describe("when using normal markdown code blocks", function() {
      var markdown;
      markdown = "This is coffeescript:\n\n    console.log(bla)";
      it("renders using listing and minted by default", function(done) {
        var tex;
        tex = "This is coffeescript:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=1]{text}\nconsole.log(bla)\n\\end{minted}\n\\end{listing}\n\n";
        render(markdown).should.eql(tex);
        return done();
      });
      it("can be supplied with a custom highlighting function", function(done) {
        var ernieHighlighting, opts, tex;
        tex = "This is coffeescript:\n\n\\begin{listing}\n\\begin{ernie}\nconsole.log(bla)\n\\end{ernie}\n\\end{listing}\n\n";
        ernieHighlighting = function(code, language) {
          return "\\begin{ernie}\n" + code + "\n\\end{ernie}";
        };
        opts = {
          renderer: new Renderer(),
          highlight: ernieHighlighting
        };
        marked(markdown, opts).should.eql(tex);
        return done();
      });
      it("unfortunately doesn't know the programming language", function(done) {
        var opts;
        opts = {
          renderer: new Renderer(),
          highlight: function(code, language) {
            if (!language) {
              return done();
            }
          }
        };
        return marked(markdown, opts);
      });
      return it("renders the correct programming language if in options", function(done) {
        var opts, tex;
        tex = "This is coffeescript:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=1]{coffeescript}\nconsole.log(bla)\n\\end{minted}\n\\end{listing}\n\n";
        opts = {
          renderer: new Renderer(),
          defaultLanguage: "coffeescript"
        };
        marked(markdown, opts).should.eql(tex);
        return done();
      });
    });
    return describe("when using github flavored three ticks block", function() {
      var githubMarkdown;
      githubMarkdown = "This is git flavored coffeescript:\n\n```coffeescript\nconsole.log(bla)\n```";
      return it("renders it with the correct programming language", function(done) {
        var opts;
        opts = {
          renderer: new Renderer(),
          highlight: function(code, language) {
            language.should.eql("coffeescript");
            return done();
          }
        };
        return marked(githubMarkdown, opts);
      });
    });
  });

  describe("Line numbers", function() {
    var markdown;
    markdown = "Block 1:\n\n    console.log(\"bla 1\")\n\nBlock 2:\n\n    console.log(\"bla 2\")\n\nDone.";
    it("are resetted for every block", function(done) {
      var tex;
      tex = "Block 1:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=1]{text}\nconsole.log(\"bla 1\")\n\\end{minted}\n\\end{listing}\n\nBlock 2:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=1]{text}\nconsole.log(\"bla 2\")\n\\end{minted}\n\\end{listing}\n\nDone.\n\n";
      render(markdown).should.eql(tex);
      return done();
    });
    return it("can be spanning over multiple blocks", function(done) {
      var opts, tex;
      tex = "Block 1:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=1]{text}\nconsole.log(\"bla 1\")\n\\end{minted}\n\\end{listing}\n\nBlock 2:\n\n\\begin{listing}\n\\begin{minted}[linenos,bgcolor=codebg,firstnumber=2]{text}\nconsole.log(\"bla 2\")\n\\end{minted}\n\\end{listing}\n\nDone.\n\n";
      opts = {
        renderer: new Renderer(),
        resetLineNumbers: false
      };
      marked(markdown, opts).should.eql(tex);
      return done();
    });
  });

}).call(this);
